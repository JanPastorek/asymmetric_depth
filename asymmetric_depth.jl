
# %%
import Pkg
using Pkg
Pkg.activate("test_env")
Pkg.add(PackageSpec(name="NautyGraphs", version="0.4.0"))
Pkg.add(["GraphIO", "Graphs", "SQLite", "DataFrames", "DBInterface", "Combinatorics", "TimerOutputs", "BenchmarkTools", "Glob","Plots", "ThreadsX", "JET"])

using SparseArrays, LinearAlgebra
using NautyGraphs, Graphs
using NautyGraphs: WordType
using NautyGraphs: DenseNautyGraph
using NautyGraphs: AbstractNautyGraph
using Graphs, TimerOutputs, BenchmarkTools, Glob
using GraphIO.Graph6
using NautyGraphs
using Combinatorics
using Base.Threads
using SQLite
using Serialization




function asymmetric_depth(g6_string::String)
    
    g6 = Graph6._g6StringToGraph(g6_string)
    A = Graphs.adjacency_matrix(g6)
    g = NautyGraph(A)
    i = 1
    canonical_table = Set{UInt64}()
    n = g.n_vertices
    grpsize::Int64, _, _ = NautyGraphs.nauty(g, false)
    if grpsize > 1
        return 0
    end

    @inbounds for i in i:n-1
        
        @inbounds for comb in combinations(1:n, n - i)

            subg, _ = Graphs.induced_subgraph(g, comb)
            grpsize, _, _, canon_hash_sub::UInt64 = NautyGraphs._nautyhash(subg)
            if grpsize > 1 || (canon_hash_sub in canonical_table)
                println("comb: ", comb)
                println("canon_hash_sub: ", canon_hash_sub)
                return i
            end
            push!(canonical_table, canon_hash_sub)
        end

        empty!(canonical_table)
    end
    return n - 1
end

# asymmetric conference graphs on 25 vertices
# g6_lines = """X~zfCqTc{YPR`jUQidaeNRLXIrIMphoxKsVXKixPZCnD[fBHuQl"""
# g6_lines =  """X~zfCqTc{YPT`fUQidaeNRKxItIMpholosZFKjXHZGnDZDYHwuF"""
# g6_lines =  """~?@_s`aaOoI?L?iE??o_EO?ZA??@?G?_O?GK?AG??PG?@D??AJC????_??_C??O?O?B??_?_?@?@G?@?@O??_?k

# asymmetric_depth(g6_lines)

# sort -n -m hash_batch_*.txt -o sorted_hashes.txt

##
